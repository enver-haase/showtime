Cheat Sheet:

Change the current directory to the demo project folder and then:
 mvn jetty:run-forked

In the browser:
 http://localhost:8080/projectname
or
 http://localhost:8080/projectname/?debug

The "?debug" works only when the Vaadin application was compiled in
debug mode, and it shows a window which allows you to measure performance
and to identify web elements (such as buttons, ...) so that you can
use those selectors for Vaadin TestBench 4.
To achieve the latter, press the tab with the checklist-clipboard icon,
and then in the sub-tab the for-arrow picker icon left of the trashcan
icon. Then select any element. You will get a description such as
"TextFieldElement firstNameTextField = $(TextFieldElement.class).caption("First Name").first();".
This text you can select with the mouse and then use the known keyboard
shortcuts to copy-and-paste those into your TestBench 4 code.


When running
 mvn -Pci-tests clean verify
then the test cases including the test database are deployed as well,
plus the "database.backend" Java system property is set to the class name
of a simple mock database.
When running the unit and integration tests against the application then
Jetty should be started as shown above, as the tests expect the mock database
contents.

Compare this to
 mvn clean verify
where tests that expect the mock database to be connected will fail.

Please also notice that the above DOES NOT FAIL THE BUILD;
failing Integration Tests do not fail the build.


However. If you have a failing Unit Test (maybe add a failing one to
BeanTests.java - the source code provides an @Ignore'd example of a
failing test, just remove the @Ignore) you will notice that the build
fails. This is intended.

While it is true that Integration Tests may be slow, it can be expected
from every developer to at least run the Unit Tests using
 mvn surefire:test (when they are still installed)
plus any additional Integration Tests (e.g. via the Eclipse IDE) that
are relevant to the code changes and additions to be checked in -- BEFORE
THE CHECK-IN.
Hint: when
 mvn surefire:test
does not find any Unit Tests, then they are not installed. Install them
with
 mvn clean install -DskipITs
(which also runs them once). Without the -DskipITs you would also run the
more time-consuming Integration Tests, so
 mvn clean install
is probably the line you want to supply to your CI server. Even better,
if you want the mock database environment for the testing, the line
 mvn -Pci-tests clean install
is what you want to set the "ci-tests" profile as defined in the pom.xml
file.

Another trick: if your Jetty is running already, then
 mvn -Pci-tests verify -Djetty.skip
skips forking a Jetty instance and just starts the browser tests against
any instance already running.
This may help especially when you update the Jetty version and forking
operating system (hello Windows users).
