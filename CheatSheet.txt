Cheat Sheet:

Change the current directory to the demo project folder and then:
 mvn jetty:run-forked

In the browser:
 http://localhost:8080/projectname
or
 http://localhost:8080/projectname/?debug

The "?debug" works only when the Vaadin application was compiled in
debug mode, and it shows a window which allows you to measure performance
and to identify web elements (such as buttons, ...) so that you can
use those selectors for Vaadin TestBench 4.
To achieve the latter, press the tab with the checklist-clipboard icon,
and then in the sub-tab the for-arrow picker icon left of the trashcan
icon. Then select any element. You will get a description such as
"TextFieldElement firstNameTextField = $(TextFieldElement.class).caption("First Name").first();".
This text you can select with the mouse and then use the known keyboard
shortcuts to copy-and-paste those into your TestBench 4 code.


When running
 mvn -Pci-tests verify
then the test cases including the test database are deployed as well,
plus the "database.backend" Java system property is set to the class name
of a simple mock database.
When running the unit and integration tests against the application then
Jetty should be started as shown above, as the tests expect the mock database
contents.

Compare this to
 mvn verify
where tests that expect the mock database to be connected will fail.

Please also notice that the above DOES NOT FAIL THE BUILD;
failing Integration Tests do not fail the build.


However. If you have a failing Unit Test (maybe add a failing one to
BeanTests.java - the source code provides an @Ignore'd example of a
failing test, just remove the @Ignore) you will notice that the build
fails. This is intended.

While it is true that Integration Tests may be slow, it can be expected
from every developer to at least run the Unit Tests using
 mvn surefire:tests
plus any additional Integration Tests (e.g. via the Eclipse IDE) that
are relevant to the code changes and additions to be checked in -- BEFORE
THE CHECK-IN.
